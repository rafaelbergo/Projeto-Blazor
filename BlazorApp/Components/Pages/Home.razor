@page "/"
@rendermode InteractiveServer
@inject IConfiguration Configuration

<PageTitle>Home</PageTitle>

<div style="display: flex; height: 100vh;">

    <!-- Menu lateral -->
    <div style="width: 275px; background-color: @menuColor; color: black; padding: 10px; box-shadow: 2px 0 5px rgba(0,0,0,0.1);">
        <h3>BlazorApp</h3>

        <p style="color:black;">Background color: </p>
        <RadzenColorPicker @bind-Value="@backgroundColor" ShowHSV="true" ShowRGBA="false" ShowColors="true" ShowButton="false" />
        <p style="color:black;">Menu color: </p>
        <RadzenColorPicker @bind-Value="@menuColor" ShowHSV="true" ShowRGBA="false" ShowColors="true" ShowButton="false" />
    </div>

    <!-- Conteudo principal -->
    <div style="width:100%; height:100%; background-color:@backgroundColor;">
        <div style="padding: 10px">
            <div style="max-width: 100%; width: fit-content;">
                <div style="display: flex; justify-content: space-between; align-items: center; gap: 20px; margin-bottom: 10px;">
                    <button @onclick="ShowAddItemModal">Add Item</button>
                    <div class="page-size-chooser">
                        Items per page:
                        <select @bind="@pagination.ItemsPerPage">
                            <option>5</option>
                            <option>10</option>
                            <option>20</option>
                            <option>50</option>
                        </select>
                    </div>
                </div>

                <QuickGrid Items="@CuboItems.AsQueryable()" TItem="Cubo" Pagination="pagination">
                    <PropertyColumn Property="@(d => d.Name)" Title="Name" Sortable="true" />
                    <PropertyColumn Property="@(d => d.Description)" Title="Description" Sortable="false" />
                    <PropertyColumn Property="@(d => d.X)" Title="X" Sortable="true" />
                    <PropertyColumn Property="@(d => d.Y)" Title="Y" Sortable="true" />
                    <PropertyColumn Property="@(d => d.Z)" Title="Z" Sortable="true" />
                    <PropertyColumn Property="@(d => d.RotX)" Title="Rotation X" Sortable="true" />
                    <PropertyColumn Property="@(d => d.RotY)" Title="Rotation Y" Sortable="true" />
                    <PropertyColumn Property="@(d => d.RotZ)" Title="Rotation Z" Sortable="true" />
                    <PropertyColumn Property="@(d => d.Scale)" Title="Scale" Sortable="true" />
                
                   <TemplateColumn Title="Action" Context="cubo">
                        @if (cubo != null)
                        {
                            <button @onclick="@(() => EditCubo(cubo))" class="btn btn-info">Edit</button>
                            <button @onclick="@(() => RemoveCubo(cubo))" class="btn btn-danger">X</button>
                        }
                    </TemplateColumn>
                </QuickGrid>
                <div style="width: 100%;">
                    <Paginator State="@pagination" />
                </div>
            </div>
        </div>
        <div style="flex-grow: 1; display: flex; gap: 20px; padding: 10px;">
            <div style="flex: 1; display: flex; flex-direction: column;">

                <RadzenGoogleMap ApiKey="@apiKey" 
                                MapId="63e75307bbe2eeef" 
                                Style="height: 100%; width: 100%;" 
                                Zoom="5" 
                                Center="@initialPosition" 
                                MapClick="OnMapClick">
                    <Markers>
                        @if (showMarker){
                            <RadzenGoogleMapMarker Title="Ponto Inicial" 
                                                   Position="@markerPosition"/>
                        }
                    </Markers>
                </RadzenGoogleMap>
                <div style="padding-top: 10px;">
                    <button @onclick="ToggleMarker">Calcular pontos</button>
                </div>
            </div>

            <div style="flex: 1;">
            <Viewer @ref="viewer" Scene="@scene" ViewerSettings="@settings" />
            </div>
        </div>
    </div>


</div>

@if (isAddItemModalVisible)
{
    <div class="modal" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); display: flex; justify-content: center; align-items: center;">
        <div class="modal-content" style="background-color: white; padding: 20px; border-radius: 5px; width: 400px;">
            <h3>Add Item</h3>
            <label>Name</label>
            <input placeholder="Name" @bind="newItem.Name" style="width: 100%; margin-bottom: 10px;" required />
            <label>Description</label>
            <input placeholder="Description" @bind="newItem.Description" style="width: 100%; margin-bottom: 10px;" />
            <label>X</label>
            <input placeholder="X" type="number" @bind="newItem.X" style="width: 100%; margin-bottom: 10px;" />
            <label>Y</label>
            <input placeholder="Y" type="number" @bind="newItem.Y" style="width: 100%; margin-bottom: 10px;" />
            <label>Z</label>
            <input placeholder="Z" type="number" @bind="newItem.Z" style="width: 100%; margin-bottom: 10px;" />
            <label>RotX</label>
            <input placeholder="RotX" type="number" @bind="newItem.RotX" style="width: 100%; margin-bottom: 10px;" />
            <label>RotY</label>
            <input placeholder="RotY" type="number" @bind="newItem.RotY" style="width: 100%; margin-bottom: 10px;" />
            <label>RotZ</label>
            <input placeholder="RotZ" type="number" @bind="newItem.RotZ" style="width: 100%; margin-bottom: 10px;" />
            <label>Scale</label>
            <input placeholder="Scale" type="number" @bind="newItem.Scale" style="width: 100%; margin-bottom: 10px;" />
            <button @onclick="SalvaItem" style="margin-right: 10px;">Salvar</button>
            <button @onclick="CloseAddItemModal">Cancelar</button>
        </div>
    </div>
}

@code {
    private string backgroundColor = "rgb(255, 255, 255)";
    private string menuColor = "rgb(37, 150, 190)";
    private Viewer viewer = null!;
    private Cubo? cuboEditando = null;

    private Scene scene = new Scene{
        Children =
        {
            new GridHelper(100, 50),
        }
    };
    private ViewerSettings settings = new ViewerSettings
    {
        CanSelect = true,
        CanSelectHelpers = false
    };

    public class Cubo{
        public Guid Id { get; set; } = Guid.NewGuid();
        public required string Name { get; set; }
        public string? Description { get; set; }
        public required double X { get; set; }
        public required double Y { get; set; }
        public required double Z { get; set; }
        public double? RotX { get; set; }
        public double? RotY { get; set; }
        public double? RotZ { get; set; }
        public double? Scale { get; set; }

        public Cubo() {}
    }
    private bool isAddItemModalVisible = false;
    private Cubo newItem = new Cubo
    {
        Name = "",
        X = 0,
        Y = 0,
        Z = 0,
        Scale = 1
    };
    List<Cubo> CuboItems = new List<Cubo>();
    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    private void ShowAddItemModal(){
        newItem = new Cubo
        {
            Name = "",
            X = 0,
            Y = 0,
            Z = 0
        };
        isAddItemModalVisible = true;
    }
    private void CloseAddItemModal() => isAddItemModalVisible = false;

    private async Task SalvaItem()
    {
        if (cuboEditando != null)
        {
            await RemoveCubo(cuboEditando);

            cuboEditando.Name = newItem.Name;
            cuboEditando.Description = newItem.Description;
            cuboEditando.X = newItem.X;
            cuboEditando.Y = newItem.Y;
            cuboEditando.Z = newItem.Z;
            cuboEditando.RotX = newItem.RotX;
            cuboEditando.RotY = newItem.RotY;
            cuboEditando.RotZ = newItem.RotZ;
            cuboEditando.Scale = newItem.Scale;

            await AdicionaCubo(cuboEditando);

            if (!CuboItems.Contains(cuboEditando))
            {
                CuboItems.Add(cuboEditando);
            }
        }
        else
        {
            CuboItems.Add(newItem);
            await AdicionaCubo(newItem);
        }

        cuboEditando = null;
        CloseAddItemModal();
    }
    private async Task AdicionaCubo(Cubo cubo)
    {
        var cube = new Mesh
        {
            Geometry = new BoxGeometry(),
            Position = new Vector3(cubo.X, cubo.Y, cubo.Z),
            Name = cubo.Id.ToString()
        };

        if (cubo.Scale.HasValue)
        {
            cube.Scale = new Vector3(cubo.Scale.Value, cubo.Scale.Value, cubo.Scale.Value);
        }

        scene.Add(cube);
        await viewer.UpdateScene();
    }

    private void EditCubo(Cubo cubo){
        cuboEditando = cubo;
        newItem = new Cubo
        {
            Name = cubo.Name,
            Description = cubo.Description,
            X = cubo.X,
            Y = cubo.Y,
            Z = cubo.Z,
            RotX = cubo.RotX,
            RotY = cubo.RotY,
            RotZ = cubo.RotZ,
            Scale = cubo.Scale
        };

        isAddItemModalVisible = true;
    }

   private async Task RemoveCubo(Cubo cubo){
        var cubeMesh = scene.Children.OfType<Mesh>().FirstOrDefault(m => m.Name == cubo.Id.ToString());

        if (cubeMesh != null)
        {
            scene.Children.Remove(cubeMesh);
            await viewer.UpdateScene();
        }

        CuboItems.Remove(cubo);
    }

    private async Task AtualizaCuboCena(Cubo cubo){
        await RemoveCubo(cubo);
        await AdicionaCubo(cubo);
    }

    private string? apiKey;

    protected override void OnInitialized(){
        apiKey = Configuration["GoogleMaps:ApiKey"];
    }

    private GoogleMapPosition initialPosition = new GoogleMapPosition { Lat = -23.5, Lng = -46.5 };
    private GoogleMapPosition markerPosition = new GoogleMapPosition { Lat = -23.5, Lng = -46.5 };
    private bool showMarker = true;

    private void ToggleMarker(){
        showMarker = !showMarker;
    }

    private void OnMapClick(GoogleMapClickEventArgs args){
        markerPosition = args.Position;
        showMarker = true;
    }
}