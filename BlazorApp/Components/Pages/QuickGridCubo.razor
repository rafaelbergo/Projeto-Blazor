<div style="padding: 10px">
    <div style="max-width: 100%; width: fit-content;">
        <div style="display: flex; justify-content: space-between; align-items: center; gap: 20px; margin-bottom: 10px;">
            <button @onclick="ShowAddItemModal">Add Item</button>
            <div class="page-size-chooser">
                Items per page:
                <select @bind="pagination.ItemsPerPage">
                    <option>5</option>
                    <option>10</option>
                    <option>20</option>
                    <option>50</option>
                </select>
            </div>
        </div>

        <QuickGrid Items="@CuboItems.AsQueryable()" TItem="Cubo" Pagination="pagination">
            <PropertyColumn Property="@(d => d.Name)" Title="Name" Sortable="true" />
            <PropertyColumn Property="@(d => d.Description)" Title="Description" Sortable="false" />
            <PropertyColumn Property="@(d => d.X)" Title="X" Sortable="true" />
            <PropertyColumn Property="@(d => d.Y)" Title="Y" Sortable="true" />
            <PropertyColumn Property="@(d => d.Z)" Title="Z" Sortable="true" />
            <PropertyColumn Property="@(d => d.RotX)" Title="Rotation X" Sortable="true" />
            <PropertyColumn Property="@(d => d.RotY)" Title="Rotation Y" Sortable="true" />
            <PropertyColumn Property="@(d => d.RotZ)" Title="Rotation Z" Sortable="true" />
            <PropertyColumn Property="@(d => d.Scale)" Title="Scale" Sortable="true" />
            <TemplateColumn Title="Action" Context="cubo">
                @if (cubo != null)
                {
                    <button @onclick="@(() => OnEditCubo.InvokeAsync(cubo))" class="btn btn-info">Edit</button>
                    <button @onclick="@(() => OnRemoveCubo.InvokeAsync(cubo))" class="btn btn-danger">X</button>
                }
            </TemplateColumn>
        </QuickGrid>
        <div style="width: 100%;">
            <Paginator State="@pagination" />
        </div>
    </div>
</div>

@if (IsAddItemModalVisible)
{
    <div class="modal" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); display: flex; justify-content: center; align-items: center;">
        <div class="modal-content" style="background-color: white; padding: 20px; border-radius: 5px; width: 400px;">
            <h3>@(EditingCubo == null ? "Add Item" : "Edit Item")</h3>
            @if (EditingCubo != null){
                <label>Name</label>
                <input placeholder="Name" @bind="EditingCubo.Name" style="width: 100%; margin-bottom: 10px;" required />
                <label>Description</label>
                <input placeholder="Description" @bind="EditingCubo.Description" style="width: 100%; margin-bottom: 10px;" />
                <label>X</label>
                <input placeholder="X" type="number" @bind="EditingCubo.X" style="width: 100%; margin-bottom: 10px;" />
                <label>Y</label>
                <input placeholder="Y" type="number" @bind="EditingCubo.Y" style="width: 100%; margin-bottom: 10px;" />
                <label>Z</label>
                <input placeholder="Z" type="number" @bind="EditingCubo.Z" style="width: 100%; margin-bottom: 10px;" />
                <label>RotX</label>
                <input placeholder="RotX" type="number" @bind="EditingCubo.RotX" style="width: 100%; margin-bottom: 10px;" />
                <label>RotY</label>
                <input placeholder="RotY" type="number" @bind="EditingCubo.RotY" style="width: 100%; margin-bottom: 10px;" />
                <label>RotZ</label>
                <input placeholder="RotZ" type="number" @bind="EditingCubo.RotZ" style="width: 100%; margin-bottom: 10px;" />
                <label>Scale</label>
                <input placeholder="Scale" type="number" @bind="EditingCubo.Scale" style="width: 100%; margin-bottom: 10px;" />
            }
            <button @onclick="SaveCubo" style="margin-right: 10px;">Save</button>
            <button @onclick="CloseAddItemModal">Cancel</button>
        </div>
    </div>
}

@code {
    [Parameter] public required List<Cubo> CuboItems { get; set; }
    [Parameter] public EventCallback<Cubo> OnEditCubo { get; set; }
    [Parameter] public EventCallback<Cubo> OnRemoveCubo { get; set; }
    [Parameter] public EventCallback<Cubo> OnAddCubo { get; set; }
    public PaginationState pagination { get; set; } = new PaginationState { ItemsPerPage = 5 };

    [Parameter] public bool IsAddItemModalVisible { get; set; }
    [Parameter] public Cubo? EditingCubo { get; set; }

    private void ShowAddItemModal()
    {
        EditingCubo = new Cubo
        {
            Name = string.Empty,
            Description = string.Empty,
            X = 0,
            Y = 0,
            Z = 0,
            RotX = 0,
            RotY = 0,
            RotZ = 0,
            Scale = 1
        };
        IsAddItemModalVisible = true;
    }

    private void CloseAddItemModal() => IsAddItemModalVisible = false;

    private void SaveCubo()
    {
        if (EditingCubo == null)
        {
            return;
        }
        
        if (CuboItems.Contains(EditingCubo))
        {
            OnEditCubo.InvokeAsync(EditingCubo);
        }
        else
        {
            CuboItems.Add(EditingCubo);
            OnAddCubo.InvokeAsync(EditingCubo);
        }

        CloseAddItemModal();
    }
}